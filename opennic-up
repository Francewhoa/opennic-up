#!/usr/bin/env bash

script="opennic-up"
version="0.90"

resolvconf="/etc/resolv.conf"

# pings run in parallel
multiping() {
  fping --quiet --period=400 --retry=0 --count=20 "$@" 2>&1
}

# dns lookup nameserver hostname
dnslookup() {
  drill A $2 @$1 | awk '$1 == "'"$2"'." && $3 == "IN" && $4 == "A" {print $5}'
}

showhelp() {
    printf "%s\n" $"usage:  $script [options]"
    printf "%s\n" $"options:"
    printf "%s\n" $"   -q     quiet, show less information"
    printf "%s\n" $"   -v     display version"
    printf "%s\n" $"   -h     help"
}

log () {
    if [[ $quiet -eq 0 ]]; then
        echo "; $@"
    fi
}


# arguments handling
quiet=0
while getopts "hvq" opt; do
    case "$opt" in
    h)
        showhelp
        exit 0
        ;;
    q)  quiet=1
        ;;
    v)  echo "$script $version"
        exit 0
        ;;
    esac
done

# check needed tools are present
needed="awk sort uniq curl fping xargs drill"
for needed_single in $needed; do
	command -v "$needed_single" >/dev/null 2>&1 && continue
	echo "$needed_single: is required, it is not installed or has not been found in your environment paths" 1>&2
	exit 1
done

anycast=185.121.177.177
# wait for network up 20s*4
log 'Checking network is up'
fping --quiet --timeout=20000 $anycast

# find out what the IP address of api.opennicproject.org is, fallback static IP address configured
apihost=api.opennicproject.org
apiip=$(dnslookup "$anycast" "$apihost")
apiip=${apiip:-"161.97.219.82"}
log "Using $apiip as API host"

# load config
configpathlist=(/etc ~/.config/opennic-up)
for p in "${configpathlist[@]}"; do
  configfile=$p/opennic-up.conf
  if [ -r $configfile ]; then
    . $configfile
  fi
done

# record my IP in whitelist if my account login parameters have been provided
if [ -n "$user" ] && [ -n "$auth" ]; then 
  log "Updating whitelist with IP for user: $user"
  ipuser=$(curl --silent --connect-timeout 60 --resolve "$apihost:443:$apiip" "https://$apihost/ip/update/?user=$user&auth=$auth")
  log "$ipuser"
fi

# query the API, list format, ipv4 only, 200 sites, no server admin sorting, including servers with blocklist and IP whitelisting
apiurl="https://$apihost/geoip/?list&ipv=4&res=200&adm=0&bl&wl"
log $apiurl
allhosts=$(curl --silent --connect-timeout 60 --resolve "$apihost:443:$apiip" $apiurl)

if [ -z "$allhosts" ]; then
  echo 'API not available' 1>&2
  exit 1
fi

# filter hosts with more than 90% reliability
reliable=$(echo "$allhosts" | awk -F# '$3 + 0.0 > 90' | awk -F# '{print $1}')
reliablecount=$(echo "$reliable" | wc -l)

if [ "$reliablecount" -ge 2 ]; then
  #pinging the hosts
  log "Pinging $reliablecount hosts to determine the top ones..."
  pingresults=$(multiping $reliable)

  # we apply the packet loss filter and also sort the servers by their average response time and keep only the IP column
  responsive=$(echo "$pingresults" | awk -F/ '$5 + 0.0 < 10' | sort -t/ -nk8 | awk '{print $1}')
  responsivecount=$(echo "$responsive" | wc -l)
  log "Resulting in $responsivecount responsive hosts"

  maxretain=3
  # replace Network Manager DNS with the new ones for all active connections
  if [ "$responsivecount" -ge 2 ]; then
    retain=$((maxretain > responsivecount ? responsivecount : maxretain))

    # we retain the top servers for our DNS
    log "Selected top $retain hosts:"
    myhosts=$(echo "$responsive" | head -n $retain)
    nameservers=""
    for dns in $myhosts; do
      log $(echo "$allhosts" | grep $dns)
      nameservers=$nameservers"nameserver $dns"$'\n'
    done
    echo -n "$nameservers"
    # nmcli
    if command -v nmcli >/dev/null 2>&1; then
      for id in $(nmcli -terse -fields UUID connection show --active); do
        currentdnss=$(nmcli -terse -fields ipv4.dns connection show $id | cut -d: -f2- | tr "," "\n")
        if [ "$(echo "$currentdnss" | sort)" == "$(echo "$myhosts" | sort)" ]; then
            log 'No dns change'
        else
            #statements
            for dns in $currentdnss; do
              nmcli connection modify $id -ipv4.dns $dns
            done

            for dns in $myhosts; do
              nmcli connection modify $id +ipv4.dns $dns
            done
            log "Updating $id"
            nmcli connection up $id >/dev/null
            log 'Successful dns update'
        fi
      done
    else
      if test -w $resolvconf; then
        log "Updating $resolvconf"
        otherlines=$(grep -v '^nameserver ' "$resolvconf")
        echo "$otherlines"$'\n'"$nameservers" > "$resolvconf"
        log 'Successful dns update'
      else 
        log "No write access to $resolvconf, no change"
      fi
    fi

  else
    echo 'Not enough responsive OpenNIC servers available' 1>&2
    exit 1
  fi

else
  echo 'Not enough OpenNIC servers available' 1>&2
  exit 1
fi
